# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
ggsave(plot = multiplot(p1,p2,p3,p4, cols = 2),"plot4.png", dpi = 1200)
library(tidyverse)
library(lubridate)
#here we read and clean data by filling "?" with NA values,
#converting columns to dates and times, as well as converting
#character columns to numeric values and then filtering to
#the correct date range
data <-read.table("household_power_consumption.txt", sep = ";",
header = TRUE) %>%
as_tibble %>%
na_if("?") %>%
mutate(across(.cols = -(1:2),
.fns = as.numeric)) %>%
mutate(across(.cols = 1, .fns = dmy)) %>%
mutate(across(.cols = 2, .fns = hms)) %>%
filter(Date >= ymd("2007-02-01") & Date <= ymd("2007-02-02"))
#need to create a datetime column with mutate
data <- data %>% mutate(dt_tm = make_datetime(year(Date),
month(Date),
day(Date),
hour(Time),
minute(Time),
second(Time)))
#need to customize and set tickmarks for the plot. We see the plot has
#thurs, fri, and sat. Which correspond to Feb 1, Feb 2, Feb 3. at time 00:00:00
#we will make it a vector and pass it to the breaks arg of scale_x_continuous,
#then call labels to set the day of week
xticks <- c(make_datetime(2007,2,1,0,0,0),
make_datetime(2007,2,2,0,0,0),
make_datetime(2007,2,3,0,0,0))
p1 <- ggplot(data = data)+
geom_histogram(mapping = aes(x = Global_active_power), fill = "red",
col = "black", bins = 24) +
labs(x = "Global Active Power (kilowatts)", y = "frequency",
title = "Global Active Power") +
theme_classic() +
ylim(c(0,1250))
ggsave("Plot1.png", dpi = 1200)
p2 <- ggplot(data = data) +
geom_line(mapping = aes(x = dt_tm, y=Global_active_power),
color = "black") +
labs(x = "Day of week", y = "Global Active Power",
title = "Daily Fluctuations") +
scale_x_continuous(breaks = xticks,labels = c("Thurs", "Fri", "Sat")) +
theme_bw()
ggsave("plot2.png", dpi = 1200)
#sub meter is not tidy form. can pivot to get it in tidy form and
#is much better for ggplot
piv <- data %>% pivot_longer(cols = 7:9, names_to = "sub_meter_type",
values_to = "key")
p3 <- ggplot(data = piv) +
geom_line(mapping = aes(x = dt_tm, y = key,color = sub_meter_type)) +
labs(x = "Day of week", y = "Energy sub metering") +
scale_x_continuous(breaks = xticks, labels = c("Thurs", "Fri", "Sat"))
ggsave("plot3.png", dpi = 1200)
p4 <- ggplot(data = data) + geom_line(mapping = aes(x = dt_tm, y = Voltage)) +
scale_x_continuous(breaks = xticks, labels =
c("Thurs", "Fri", "Sat")) +
labs(x = "Day of week")
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(p1,p2,p3,p4, cols = 2)
ggsave(plot = multiplot(p1,p2,p3,p4, cols = 2),"plot4.png", dpi = 1200)
library(tidyverse)
library(lubridate)
#here we read and clean data by filling "?" with NA values,
#converting columns to dates and times, as well as converting
#character columns to numeric values and then filtering to
#the correct date range
data <-read.table("household_power_consumption.txt", sep = ";",
header = TRUE) %>%
as_tibble %>%
na_if("?") %>%
mutate(across(.cols = -(1:2),
.fns = as.numeric)) %>%
mutate(across(.cols = 1, .fns = dmy)) %>%
mutate(across(.cols = 2, .fns = hms)) %>%
filter(Date >= ymd("2007-02-01") & Date <= ymd("2007-02-02"))
#need to create a datetime column with mutate
data <- data %>% mutate(dt_tm = make_datetime(year(Date),
month(Date),
day(Date),
hour(Time),
minute(Time),
second(Time)))
#need to customize and set tickmarks for the plot. We see the plot has
#thurs, fri, and sat. Which correspond to Feb 1, Feb 2, Feb 3. at time 00:00:00
#we will make it a vector and pass it to the breaks arg of scale_x_continuous,
#then call labels to set the day of week
xticks <- c(make_datetime(2007,2,1,0,0,0),
make_datetime(2007,2,2,0,0,0),
make_datetime(2007,2,3,0,0,0))
source('~/SIFT_MC_JSON.R')
View(df_tidy)
View(dfresult)
x1 <- c(22,23,27,16,29,20,26)
x2 <- c(500,547,520,560,530,525,516)
library(tidyverse)
df <- tibble(x = x1, y = x2)
df
scale(df)
scale(df, center = TRUE, scale = TRUE)
install.packages("factoextra")
install.packages(c("leaps", "flashClust"))
install.packages("leaps")
library(leaps)
install.packages("leaps")
install.packages("leaps")
install.packages(c("backports", "conquer", "dplyr", "fields", "glue", "maptools", "tidyr", "vctrs", "zip"))
install.packages("leaps")
install.packages("zip")
library(backports)
detach("package:backports", unload = TRUE)
library(Rcpp)
detach("package:Rcpp", unload = TRUE)
remove.packages("Rcpp", lib="~/R/win-library/4.0")
remove.packages("RcppArmadillo", lib="~/R/win-library/4.0")
remove.packages("RcppEigen", lib="~/R/win-library/4.0")
install.packages("leaps")
install.packages(c("backports", "conquer"))
source('~/clustering.R')
source('~/clustering.R')
df
source('~/clustering.R')
df
View(df)
source('~/clustering.R')
source('~/clustering.R')
df
source('~/clustering.R')
df
source('~/clustering.R')
source('~/clustering.R')
source('~/clustering.R')
source('~/clustering.R')
source('~/clustering.R')
source('~/clustering.R')
source('~/clustering.R')
source('~/clustering.R')
source('~/clustering.R')
source('~/clustering.R')
source('~/clustering.R')
source('~/clustering.R')
source('~/clustering.R')
source('~/clustering.R')
source('~/clustering.R')
source('~/clustering.R')
source('~/clustering.R')
source('~/clustering.R')
source('~/clustering.R')
source('~/clustering.R')
source('~/clustering.R')
source('~/clustering.R')
source('~/clustering.R')
source('~/clustering.R')
source('~/clustering.R')
source('~/clustering.R')
source('~/clustering.R')
source('~/skin_calc.R')
source('~/skin_calc.R')
library(swirl)
install_course("Regression_Models")
swirl()
plot(child~parent, galton)
plot(jitter(child,4)~parent, galton)
regrline <- lm(child~parent, galton)
abline(regrline,lwd = 3, col = "red")
summary(regrline)
fit <- lm(child~parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs-rhs
all.equal(lhs,rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, (varRes+varEst)
all.equal(varChild, (varRes+varEst)
all.equal(varChild, (varRes+varEst))
all.equal(varChild, (varRes+varEst))
all.equal(varChild, varRes+varEst)
efit <- lm(accel ~ mag + dist, attenu)
mean(fit$residuals)
mean(efit$residuals)
cov(attenu$mag)
cov(attenu$mag, efit$residuals)
cov(attenu$dist, efit$residuals)
cor(gpa_nor,gch_nor)
l_nor <- lm(gch_nor,gpa_nor)
l_nor <- lm(gch_nor~gpa_nor)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
mu <- c(.0025,1.07,.3,.1471)
s <- w*(x - mu)^2
s
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit <- lm(y~x)
summary(fit)
data("mtcars")
mpg
mtcars
fit <- lm(mtcars$mpg~mtcars$wt)
summary(fit)
5/.2
.2/5
.5/5
5*.5
1/.5
2/5
.5*.5
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
scale(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
summary(lm(y~x))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mu <- c(.44,.8,.573,.36)
s <- x*(x - mu)^2
mu <- c(.44,.8,.573,.36, rep(4,6))
s <- x*(x - mu)^2
s
?ls
?ste
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
mu <- c(.0025,1.07,.3,.1471)
for(i in mu){}
}
s <- NULL
for(i in mu){
s <- c(s,sum(w*(x-mu)^2))
}
s
for(i in mu){
s <- c(s,sum(w*(x-i)^2))
}
s
s <- NULL
for(i in mu){
s <- c(s,sum(w*(x-i)^2))
}
s
?lm
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
summary(lm(y~x+0))
source('~/R/win-library/4.0/swirl/Courses/Regression_Models/Least_Squares_Estimation/finalplot.R')
source('~/R/win-library/4.0/swirl/Courses/Regression_Models/Least_Squares_Estimation/slopedemo_no_mani.R')
source('~/R/win-library/4.0/swirl/Courses/Regression_Models/Least_Squares_Estimation/finalplot.R')
mtcars
View(mtcars)
?
?mtcars
install.packages("caret")
install.packages("prodlim")
install.packages("ggbiplot")
library(devtools)
install_github("vqv/ggbiplot")
install.packages("devtools")
install.packages(c("pkgload", "ps", "processx"))
library(devtools)
install_github("vqv/ggbiplot")
install.packages("AppliedPredictiveModeling")
install.packages("CORElearn")
install.packages("CORElearn")
install.packages("autoBagging")
install.packages("CORElearn")
install.packages("CORElearn")
library(AppliedPredictiveModeling)
install.packages("CORElearn")
remove.packages("RcppArmadillo", lib="~/R/win-library/4.0")
remove.packages("Rcpp", lib="~/R/win-library/4.0")
install.packages("CORElearn")
library(caret)
install.packages("Rcpp")
library(caret)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
View(predictors)
adData <- data.frame(diagnosis, predictors)
head(adData)
adData[1:10,]
View(adData)
inTrain <- createDataPartition(adData, p = .75)
inTrain <- createDataPartition(adData$diagnosis, p = .75)
View(inTrain)
inTrain <- createDataPartition(adData$diagnosis, p = .75)[[1]]
inTrain
training <- adData[inTrain]; testing <- adData[-inTrain]
training <- adData[inTrain]
training <- adData[inTrain,]; testing <- adData[-inTrain,]
ad.pca <- prcomp(training[,-1], center = TRUE, scale = TRUE)
ad.pca <- prcomp(training[,2:131], center = TRUE, scale = TRUE)
summary(training)
as_tibble(training)
str(training)
ad.pca <- prcomp(training[,2:131], center = TRUE, scale = TRUE)
ad.pca <- prcomp(training[,2:131], center = TRUE, scale. = TRUE)
ad.pca <- prcomp(training[,2:131], center = TRUE, scale = TRUE)
as.numeric(training[,-1])
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
str(training)
source('~/pcaBasic.R')
source('~/pcaBasic.R')
colMeans(training)
is.numeric(training)
is.numeric(training[,-1])
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
summary(ad.pca)
source('~/pcaBasic.R')
summary(ad.pca)
x <- tibble(x = as.factor(c("a","b")))
x
scale(x)
source('~/pcaBasic.R')
View(no_pca)
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
trainPC
View(trainPC)
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
summary(ad.pca)
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
source('~/pcaBasic.R')
mtcars
source('~/graphingPCA.R')
source('~/graphingPCA.R')
source('~/rpartModel.R')
View(segmentationOriginal)
source('~/rpartModel.R')
source('~/rpartModel.R')
source('~/rpartModel.R')
source('~/rpartModel.R')
segmentationOriginal$Case
segmentationOriginal$Case == "Train"
x <- segmentationOriginal$Case == "Train"
segmentationOriginal[x]
segmentationOriginal[x,]
source('~/rpartModel.R')
View(test)
source('~/rpartModel.R')
source('~/rpartModel.R')
source('~/rpartModel.R')
View(fit1)
fit1$finalModel
install.packages("pgmm")
source('~/rpartOlive.R')
source('~/rpartOlive.R')
View(olive)
source('~/rpartOlive.R')
source('~/rpartOlive.R')
source('~/rpartOlive.R')
source('~/rpartOlive.R')
source('~/rpartOlive.R')
fit$finalModel
source('~/rpartOlive.R')
source('~/rpartOlive.R')
install.packages("googleVis")
women
library(googleVis)
scat <- gvisScatterChart(women)
plot(scat)
install.packages("tidytext")
install.packages("SnowballC")
scat <- gvisScatterChart(mtcars)
plot(scat)
mtcars
scat <- gvisScatterChart(mtcars,options=list(gvis.editor='Edit me!'))
plot(scat)
scat <- gvisMotionChart(mtcars)
mpg
Fruits
scat <- gvisMotionChart(Fruits)
scat <- gvisMotionChart(Fruits, "Fruit", "Year")
plot(scat)
scat <- gvisMotionChart(Fruits, "Fruit", "Year", results = "asis")
scat
print(scat,"chart")
plot(scat)
scat <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
plot(scat)
plot(scat)
library(devtools)
install_github("slidify", "ramnathv")
install_github('ramnathv/slidifyl')
library(devtools)
# install dependencies from CRAN
deps <- c("knitr", "markdown", "yaml", "whisker", "stringr")
install.packages(deps)
# install packages from github
ghrepos <- c('slidify', 'slidifyLibraries', 'rCharts')
install_github(ghrepos, 'ramnathv', ref = 'dev')
install.packages("slidify")
install.packages("devtools")
library(devtools)
install_github("slidify", "ramnathv")
install_github("slidifylibraries", "ramnathv")
install.packages("devtools")
library(devtools)
install_github("slidify", "ramnathv")
install_github("slidifylibraries", "ramnathv")
install_github('ramnathv/slidify')
install_github("ramnathv/slidifyLibraries")
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
setwd("~/shinyApp1/mydeck")
slidify("index.Rmd")
setwd("~/")
library(slidify)
author("myslidify")
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
publish_github(repo="slidify4", username="kwr3")
